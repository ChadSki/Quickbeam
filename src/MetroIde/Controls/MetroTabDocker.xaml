<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:avalonDock="http://schemas.xceed.com/wpf/xaml/avalondock">

    <Style TargetType="{x:Type avalondock:DockingManager}">
        <Setter Property="DocumentPaneControlStyle">
            <Setter.Value>
                <Style TargetType="{x:Type avalondock:LayoutDocumentPaneControl}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type avalondock:LayoutDocumentPaneControl}">
                                <Grid SnapsToDevicePixels="True"
                                      KeyboardNavigation.TabNavigation="Local">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                    <Border Background="Transparent" Grid.RowSpan="2" />
                                    <Grid Panel.ZIndex="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <avalondock:DocumentPaneTabPanel x:Name="HeaderPanel" Grid.Column="0"
                                                                         FlowDirection="LeftToRight"
                                                                         IsItemsHost="True" Margin="2,2,2,0"
                                                                         Grid.Row="0"
                                                                         KeyboardNavigation.TabIndex="1" />
                                        <avalondock:DropDownButton x:Name="MenuDropDownButton" Grid.Column="1"
                                                                   Focusable="False">
                                            <avalondock:DropDownButton.DropDownContextMenu>
                                                <avalondock:ContextMenuEx>
                                                    <avalondock:ContextMenuEx.ItemContainerStyle>
                                                        <Style TargetType="{x:Type avalondock:MenuItemEx}">
                                                            <Setter Property="HeaderTemplate"
                                                                    Value="{Binding Root.Manager.DocumentPaneMenuItemHeaderTemplate}" />
                                                            <Setter Property="HeaderTemplateSelector"
                                                                    Value="{Binding Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}" />
                                                            <Setter Property="IconTemplate"
                                                                    Value="{Binding Root.Manager.IconContentTemplate}" />
                                                            <Setter Property="IconTemplateSelector"
                                                                    Value="{Binding Root.Manager.IconContentTemplateSelector}" />
                                                            <Setter Property="Command">
                                                                <Setter.Value>
                                                                    <Binding Path=".">
                                                                        <Binding.Converter>
                                                                            <avalondock:ActivateCommandLayoutItemFromLayoutModelConverter />
                                                                        </Binding.Converter>
                                                                    </Binding>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Style.BasedOn>
                                                                <Style TargetType="{x:Type MenuItem}">
                                                                    <Setter Property="HorizontalContentAlignment"
                                                                            Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
                                                                    <Setter Property="VerticalContentAlignment"
                                                                            Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
                                                                    <Setter Property="Background" Value="Transparent" />
                                                                    <Setter Property="ScrollViewer.PanningMode"
                                                                            Value="Both" />
                                                                    <Setter Property="Stylus.IsFlicksEnabled"
                                                                            Value="False" />
                                                                    <Setter Property="Template"
                                                                            Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                                                                    <Style.Triggers>
                                                                        <Trigger Property="Role" Value="TopLevelHeader">
                                                                            <Setter Property="Padding" Value="7,2,8,3" />
                                                                            <Setter Property="Template"
                                                                                    Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                                                                        </Trigger>
                                                                        <Trigger Property="Role" Value="TopLevelItem">
                                                                            <Setter Property="Padding" Value="7,2,8,3" />
                                                                            <Setter Property="Template"
                                                                                    Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                                                                        </Trigger>
                                                                        <Trigger Property="Role" Value="SubmenuHeader">
                                                                            <Setter Property="Padding" Value="2,3" />
                                                                            <Setter Property="Template"
                                                                                    Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                                                                        </Trigger>
                                                                        <Trigger Property="Role" Value="SubmenuItem">
                                                                            <Setter Property="Padding" Value="2,3" />
                                                                        </Trigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Style.BasedOn>
                                                        </Style>
                                                    </avalondock:ContextMenuEx.ItemContainerStyle>
                                                </avalondock:ContextMenuEx>
                                            </avalondock:DropDownButton.DropDownContextMenu>
                                            <avalondock:DropDownButton.Style>
                                                <Style TargetType="{x:Type ToggleButton}">
                                                    <Setter Property="Foreground"
                                                            Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                                    <Setter Property="Padding" Value="2" />
                                                    <Setter Property="BorderThickness" Value="1" />
                                                    <Setter Property="Background" Value="Transparent" />
                                                    <Setter Property="BorderBrush" Value="Transparent" />
                                                    <Setter Property="HorizontalAlignment" Value="Center" />
                                                    <Setter Property="VerticalAlignment" Value="Center" />
                                                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                                                    <Setter Property="VerticalContentAlignment" Value="Center" />
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                <Border BorderBrush="{TemplateBinding BorderBrush}"
                                                                        BorderThickness="{TemplateBinding BorderThickness}"
                                                                        Background="{TemplateBinding Background}"
                                                                        Padding="{TemplateBinding Padding}"
                                                                        SnapsToDevicePixels="True">
                                                                    <ContentPresenter
                                                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                        Content="{TemplateBinding Content}"
                                                                        ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                                                </Border>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsChecked" Value="True">
                                                                        <Setter Property="BorderBrush"
                                                                                Value="#FF3399FF" />
                                                                        <Setter Property="Background" Value="#FFE6F0FA" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="BorderBrush"
                                                                                Value="#FF3399FF" />
                                                                        <Setter Property="Background" Value="#FFC2E0FF" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsKeyboardFocused" Value="True">
                                                                        <Setter Property="BorderBrush"
                                                                                Value="#FF3399FF" />
                                                                        <Setter Property="Background" Value="#FFC2E0FF" />
                                                                    </Trigger>
                                                                    <MultiTrigger>
                                                                        <MultiTrigger.Conditions>
                                                                            <Condition Property="IsMouseOver"
                                                                                       Value="True" />
                                                                            <Condition Property="IsChecked"
                                                                                       Value="True" />
                                                                        </MultiTrigger.Conditions>
                                                                        <Setter Property="BorderBrush"
                                                                                Value="#FF3399FF" />
                                                                        <Setter Property="Background" Value="#FF99CCFF" />
                                                                    </MultiTrigger>
                                                                    <MultiTrigger>
                                                                        <MultiTrigger.Conditions>
                                                                            <Condition Property="IsKeyboardFocused"
                                                                                       Value="True" />
                                                                            <Condition Property="IsChecked"
                                                                                       Value="True" />
                                                                        </MultiTrigger.Conditions>
                                                                        <Setter Property="BorderBrush"
                                                                                Value="#FF3399FF" />
                                                                        <Setter Property="Background" Value="#FF99CCFF" />
                                                                    </MultiTrigger>
                                                                    <Trigger Property="IsPressed" Value="True">
                                                                        <Setter Property="BorderBrush"
                                                                                Value="#FF3399FF" />
                                                                        <Setter Property="Background" Value="#FF99CCFF" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Foreground"
                                                                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </avalondock:DropDownButton.Style>
                                            <Image>
                                                <Image.Source>
                                                    <BitmapImage
                                                        UriSource="pack://application:,,,/AvalonDock;component/Images/PinDocMenu.png" />
                                                </Image.Source>
                                            </Image>
                                        </avalondock:DropDownButton>
                                    </Grid>
                                    <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}"
                                            Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained"
                                            HorizontalAlignment="Stretch"
                                            Grid.Row="1" KeyboardNavigation.TabIndex="2"
                                            KeyboardNavigation.TabNavigation="Cycle"
                                            VerticalAlignment="Stretch">
                                        <ContentPresenter x:Name="PART_SelectedContentHost"
                                                          ContentTemplate="{TemplateBinding SelectedContentTemplate}"
                                                          Content="{TemplateBinding SelectedContent}"
                                                          ContentStringFormat="{TemplateBinding SelectedContentStringFormat}"
                                                          ContentSource="SelectedContent"
                                                          Margin="{TemplateBinding Padding}"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Border>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Foreground"
                                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                    </Trigger>
                                    <DataTrigger
                                        Binding="{Binding Model.ChildrenCount, RelativeSource={RelativeSource Self}}"
                                        Value="0">
                                        <Setter Property="Visibility" TargetName="MenuDropDownButton" Value="Collapsed" />
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ItemContainerStyle">
                        <Setter.Value>
                            <Style TargetType="{x:Type TabItem}">
                                <Setter Property="Visibility">
                                    <Setter.Value>
                                        <Binding Path="IsVisible">
                                            <Binding.Converter>
                                                <avalondock:BoolToVisibilityConverter />
                                            </Binding.Converter>
                                        </Binding>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                                <Setter Property="ToolTip" Value="{Binding ToolTip}" />
                            </Style>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ItemTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <avalondock:LayoutDocumentTabItem Model="{Binding}" />
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <avalondock:LayoutDocumentControl Model="{Binding}" />
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="AnchorablePaneControlStyle">
            <Setter.Value>
                <Style TargetType="{x:Type avalondock:LayoutAnchorablePaneControl}">
                    <Setter Property="TabStripPlacement" Value="Bottom" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type avalondock:LayoutAnchorablePaneControl}">
                                <Grid SnapsToDevicePixels="True"
                                      KeyboardNavigation.TabNavigation="Local">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Border Background="Transparent" Grid.RowSpan="2" />
                                    <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}"
                                            Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained"
                                            Grid.Row="0"
                                            KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Cycle">
                                        <ContentPresenter x:Name="PART_SelectedContentHost"
                                                          ContentTemplate="{TemplateBinding SelectedContentTemplate}"
                                                          Content="{TemplateBinding SelectedContent}"
                                                          ContentStringFormat="{TemplateBinding SelectedContentStringFormat}"
                                                          ContentSource="SelectedContent"
                                                          Margin="{TemplateBinding Padding}"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Border>
                                    <avalondock:AnchorablePaneTabPanel x:Name="HeaderPanel" FlowDirection="LeftToRight"
                                                                       IsItemsHost="True"
                                                                       Margin="2,0,2,2" Grid.Row="1"
                                                                       KeyboardNavigation.TabIndex="1"
                                                                       Panel.ZIndex="1" />
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Foreground"
                                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ItemContainerStyle">
                        <Setter.Value>
                            <Style TargetType="{x:Type TabItem}">
                                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                                <Setter Property="ToolTip" Value="{Binding ToolTip}" />
                                <Style.Triggers>
                                    <DataTrigger
                                        Binding="{Binding Items.Count, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}"
                                        Value="1">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ItemTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <avalondock:LayoutAnchorableTabItem Model="{Binding}" />
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <avalondock:LayoutAnchorableControl Model="{Binding}" />
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="AnchorSideTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalondock:LayoutAnchorSideControl}">
                    <ItemsControl>
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel IsItemsHost="True">
                                    <StackPanel.Orientation>
                                        <Binding Path="Model.Side"
                                                 RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalondock:LayoutAnchorSideControl}}">
                                            <Binding.Converter>
                                                <avalondock:AnchorSideToOrientationConverter />
                                            </Binding.Converter>
                                        </Binding>
                                    </StackPanel.Orientation>
                                </StackPanel>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AnchorGroupTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalondock:LayoutAnchorGroupControl}">
                    <ItemsControl>
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel IsItemsHost="True" Orientation="Horizontal" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.LayoutTransform>
                            <RotateTransform>
                                <RotateTransform.Angle>
                                    <Binding Path="Model.Parent.Side" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <avalondock:AnchorSideToAngleConverter />
                                        </Binding.Converter>
                                    </Binding>
                                </RotateTransform.Angle>
                            </RotateTransform>
                        </ItemsControl.LayoutTransform>
                    </ItemsControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AnchorTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalondock:LayoutAnchorControl}">
                    <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                            BorderThickness="1" Margin="2"
                            Padding="2">
                        <ContentPresenter
                            ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalondock:DockingManager}}}"
                            Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentHeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AnchorableHeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Image x:Name="icon" Stretch="Uniform">
                            <Image.Source>
                                <Binding Path="IconSource">
                                    <Binding.Converter>
                                        <avalondock:NullToDoNothingConverter />
                                    </Binding.Converter>
                                </Binding>
                            </Image.Source>
                        </Image>
                        <TextBlock x:Name="title" Grid.Column="1" Margin="4,0,0,0" Text="{Binding Title}"
                                   TextTrimming="CharacterEllipsis" />
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding IconSource}" Value="{x:Null}">
                            <Setter Property="Margin" TargetName="title" Value="0" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentTitleTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AnchorableTitleTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AnchorableContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Command="{Binding FloatCommand}" Header="Float" />
                    <MenuItem Command="{Binding DockCommand}" Header="Dock" />
                    <MenuItem Command="{Binding DockAsDocumentCommand}" Header="Dock as Tabbed Document" />
                    <MenuItem Command="{Binding AutoHideCommand}" Header="Auto Hide" />
                    <MenuItem Command="{Binding CloseCommand}" Header="Close">
                        <MenuItem.Visibility>
                            <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                <Binding.Converter>
                                    <avalondock:BoolToVisibilityConverter />
                                </Binding.Converter>
                            </Binding>
                        </MenuItem.Visibility>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Command="{Binding CloseCommand}" Header="Close">
                        <MenuItem.Visibility>
                            <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                <Binding.Converter>
                                    <avalondock:BoolToVisibilityConverter />
                                </Binding.Converter>
                            </Binding>
                        </MenuItem.Visibility>
                    </MenuItem>
                    <MenuItem Command="{Binding CloseAllButThisCommand}" Header="Close All But This" />
                    <MenuItem Command="{Binding FloatCommand}" Header="Float" />
                    <MenuItem Command="{Binding DockAsDocumentCommand}" Header="Dock as Tabbed Document" />
                    <MenuItem Command="{Binding NewHorizontalTabGroupCommand}" Header="New Horizontal Tab Group">
                        <MenuItem.Visibility>
                            <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                <Binding.Converter>
                                    <avalondock:BoolToVisibilityConverter />
                                </Binding.Converter>
                            </Binding>
                        </MenuItem.Visibility>
                    </MenuItem>
                    <MenuItem Command="{Binding NewVerticalTabGroupCommand}" Header="New Vertical Tab Group">
                        <MenuItem.Visibility>
                            <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                <Binding.Converter>
                                    <avalondock:BoolToVisibilityConverter />
                                </Binding.Converter>
                            </Binding>
                        </MenuItem.Visibility>
                    </MenuItem>
                    <MenuItem Command="{Binding MoveToNextTabGroupCommand}" Header="Move To Next Tab Group">
                        <MenuItem.Visibility>
                            <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                <Binding.Converter>
                                    <avalondock:BoolToVisibilityConverter />
                                </Binding.Converter>
                            </Binding>
                        </MenuItem.Visibility>
                    </MenuItem>
                    <MenuItem Command="{Binding MoveToPreviousTabGroupCommand}" Header="Move To Previous Tab Group">
                        <MenuItem.Visibility>
                            <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                <Binding.Converter>
                                    <avalondock:BoolToVisibilityConverter />
                                </Binding.Converter>
                            </Binding>
                        </MenuItem.Visibility>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentPaneMenuItemHeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IconContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Image Stretch="Uniform">
                        <Image.Source>
                            <Binding Path="IconSource">
                                <Binding.Converter>
                                    <avalondock:NullToDoNothingConverter />
                                </Binding.Converter>
                            </Binding>
                        </Image.Source>
                    </Image>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalondock:DockingManager}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <Grid FlowDirection="LeftToRight">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ContentPresenter Content="{TemplateBinding LayoutRootPanel}" Grid.Column="1" Grid.Row="1" />
                            <ContentPresenter Content="{TemplateBinding RightSidePanel}" Grid.Column="2" Grid.Row="1" />
                            <ContentPresenter Content="{TemplateBinding LeftSidePanel}" Grid.Column="0" Grid.Row="1" />
                            <ContentPresenter Content="{TemplateBinding TopSidePanel}" Grid.Column="1" Grid.Row="0" />
                            <ContentPresenter Content="{TemplateBinding BottomSidePanel}" Grid.Column="1" Grid.Row="2" />
                            <ContentPresenter x:Name="PART_AutoHideArea" Content="{TemplateBinding AutoHideWindow}"
                                              Grid.Column="1"
                                              HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Grid.Row="1"
                                              VerticalAlignment="{TemplateBinding VerticalAlignment}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>